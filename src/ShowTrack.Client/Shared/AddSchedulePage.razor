@using ShowTrack.Contracts.Dtos
@using System.Globalization

@inject DialogService DialogService

<h1>@Show.Title</h1>

<div>
    <RadzenTemplateForm TItem="UpdateShowScheduleDto" Data="NewSchedule" Submit="() => DialogService.Close(NewSchedule)">
        <RadzenRow Gap="10">
            <RadzenColumn Size="12" SizeSM="10">
                <RadzenFormField Text="Schedule Date" Style="width: 100%;">
                    <RadzenDatePicker TValue="DateOnly" @bind-Value="@NewSchedule!.ReleaseDate" Name="ScheduleDate" Culture='new CultureInfo("en-us")' Min="DateTime.Today.AddDays(1)" DateFormat="yyyy/MM/dd" />
                </RadzenFormField>
                <RadzenNumericRangeValidator Min="DateOnly.FromDateTime(DateTime.Today)" Component="ScheduleDate" Text="Invalid date."/>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="2">
                <RadzenFormField Text="Season" Style="width: 100%;">
                    <RadzenNumeric Min="@minSeason" Name="ScheduleSeason" TValue="int?" ShowUpDown="false" @bind-Value="@NewSchedule!.Season" Style="width: 100%;" />
                </RadzenFormField>
                <RadzenCustomValidator Text="@seasonValidatorText" Component="ScheduleSeason" Validator="ValidateSeason"></RadzenCustomValidator>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow RowGap="15" Gap="0">
            <RadzenColumn Size="12" />
            <RadzenColumn Offset="8" Size="4" OffsetSM="10" SizeSM="2">
                <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Text="@(isUpdate ? "Update" : "Add")" Style="width:100%" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</div>

@code {
    [Parameter]
    public required ReadShowDto Show { get; set; }

    private string seasonValidatorText = string.Empty;

    private int minSeason;
    private UpdateShowScheduleDto? NewSchedule;
    private bool isUpdate;

    protected override Task OnInitializedAsync()
    {
        minSeason = Show.CurrentSeason;
        isUpdate = Show.Schedule is not null;

        NewSchedule = new()
        {
            ShowId = Show.Id,
            ReleaseDate = Show.Schedule?.ReleaseDate ?? DateOnly.FromDateTime(DateTime.Now).AddDays(1),
            Season = minSeason + 1
        };

        return Task.CompletedTask;
    }

    private bool ValidateSeason()
    {
        switch (NewSchedule!.Season)
        {
            case > 0 when NewSchedule!.Season > minSeason:
                return true;
            case null:
                seasonValidatorText = "Season is required.";
                break;
            default:
                seasonValidatorText = "Invalid season!";
                break;
        }

        return false;
    }
}
