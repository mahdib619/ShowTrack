@page "/"

@using ShowTrack.Contracts.Dtos
@using ShowTrack.Client.Services
@using System.Globalization
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IShowsService ShowsService
@inject DialogService DialogService

<div style="margin-top:10px">
    <RadzenRow Style="padding-right:18px;margin-bottom:10px;">
        <RadzenColumn Size="4" Offset="8" OffsetLG="11" SizeLG="1">
            <RadzenButton ButtonStyle="ButtonStyle.Success" Text="New Show" Style="width:100%" Click="AddShow" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDataList @ref="showDataList" AllowPaging="@(showsCount > pageSize)" Data="@shows" IsLoading="@isLoading" LoadData="LoadData" PageSize="@pageSize" Count="@showsCount" ShowPagingSummary="true"
                    TItem="ReadShowDto" WrapItems="true" PagerHorizontalAlign="HorizontalAlign.Left">
        <Template Context="show">
            <RadzenCard Style="width: 100%; padding: 0;">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4 show-title">
                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(show.Title)</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeLG="8" Class="rz-p-4">
                        <RadzenRow Gap="0">
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="1" Style="padding-right:80px">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Season</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(show.CurrentSeason)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Next Season On</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(show.Schedule?.ReleaseDate.ToString("yyyy-MM-dd", new CultureInfo("en-us")) ?? "-")</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">State</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(show.IsEnded ? "ended" : "on-going")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4">
                        <RadzenButton Text="Schedule" Style="width: 100%" Click="()=>AddSchedule(show)" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
</div>

@code
{
    bool isLoading;
    int showsCount;
    const int pageSize = 6;
    RadzenDataList<ReadShowDto> showDataList = new();
    PagedResponseDto<ReadShowDto>? pagedShows;
    ICollection<ReadShowDto>? shows;

    private async Task LoadData(LoadDataArgs loadArgs)
    {
        isLoading = true;

        pagedShows = await ShowsService.GetAllShows((loadArgs.Skip / loadArgs.Top) + 1, loadArgs.Top);
        shows = pagedShows?.Items;
        showsCount = pagedShows?.TotalCount ?? 0;

        isLoading = false;
    }

    private async Task AddShow()
    {
        CreateShowDto? newShow = await DialogService.OpenAsync<AddShowPage>("New Show", null, new() { ShowClose = false, CloseDialogOnOverlayClick = true });

        if (newShow is null)
            return;

        await ShowsService.CreateShow(newShow);

        await showDataList.Reload();
    }

    private async Task AddSchedule(ReadShowDto show)
    {
        UpdateShowScheduleDto? newSchedule = await DialogService.OpenAsync<AddSchedulePage>("Update Schedule",
                                                                                             new() { ["Show"] = show },
                                                                                             new() { ShowClose = false, CloseDialogOnOverlayClick = true });

        if (newSchedule is null)
            return;

        await ShowsService.CreateOrUpdateShowSchedule(newSchedule);

        show.Schedule = (await ShowsService.GetSingleShow(show.Id))?.Schedule;
    }
}
